"""
1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
entre 1 y el n√∫mero que indique el usuario.
"""

# Funci√≥n recursiva para calcular el factorial
def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

# Pedimos al usuario el n√∫mero hasta donde calcular
numero = int(input("Ingrese un n√∫mero: "))

# Mostramos el factorial de todos los n√∫meros entre 1 y el ingresado
for i in range(1, numero + 1):
    print(f"Factorial de {i} es: {factorial(i)}")

"""
2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
especifique.
"""

# Funci√≥n recursiva para calcular el n-√©simo n√∫mero de Fibonacci
def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

# Pedimos al usuario la posici√≥n hasta donde calcular
posicion = int(input("Ingrese hasta qu√© posici√≥n de Fibonacci quiere calcular: "))

# Mostramos toda la serie hasta la posici√≥n indicada
print("Serie de Fibonacci:")
for i in range(posicion + 1):
    print(fibonacci(i), end=" ")

"""
3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
exponente, utilizando la f√≥rmula ùëõ
ùëö = ùëõ ‚àó ùëõ
(ùëö‚àí1)
. Prueba esta funci√≥n en un algoritmo general.
"""

# Funci√≥n recursiva para calcular la potencia
def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)

# Pedimos los datos al usuario
base = int(input("Ingrese la base: "))
exponente = int(input("Ingrese el exponente: "))

# Calculamos y mostramos el resultado
resultado = potencia(base, exponente)
print(f"{base} elevado a la {exponente} es: {resultado}")

"""
4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
decimal y devuelva su representaci√≥n en binario como una cadena de texto.

Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) y
unos (1), en base 2. Para convertir un n√∫mero decimal a binario, se puede seguir este
procedimiento:
1. Dividir el n√∫mero por 2.
2. Guardar el resto (0 o 1).
3. Repetir el proceso con el cociente hasta que llegue a 0.
4. Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario.

üß†Ejemplo:
Convertir el n√∫mero 10 a binario:
10 √∑ 2 = 5 resto: 0
5 √∑ 2 = 2 resto: 1
2 √∑ 2 = 1 resto: 0
1 √∑ 2 = 0 resto: 1
Leyendo los restos de abajo hacia arriba: 1 0 1 0 ‚Üí El resultado binario es "1010".
"""

# Funci√≥n recursiva para convertir decimal a binario
def decimal_a_binario(n):
    if n == 0:
        return ""
    else:
        return decimal_a_binario(n // 2) + str(n % 2)

# Pedimos el n√∫mero al usuario
numero = int(input("Ingrese un n√∫mero entero positivo: "))

# Caso especial si el n√∫mero es 0 (para que no devuelva cadena vac√≠a)
if numero == 0:
    print("El n√∫mero en binario es: 0")
else:
    binario = decimal_a_binario(numero)
    print(f"El n√∫mero en binario es: {binario}")

"""
5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no
lo es.
 Requisitos:
La soluci√≥n debe ser recursiva.
No se debe usar [::-1] ni la funci√≥n reversed().
"""

# Funci√≥n recursiva para verificar si una palabra es pal√≠ndromo
def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    elif palabra[0] != palabra[-1]:
        return False
    else:
        return es_palindromo(palabra[1:-1])

# Pedimos la palabra al usuario
palabra = input("Ingrese una palabra: ").lower()

# Llamamos a la funci√≥n y mostramos el resultado
if es_palindromo(palabra):
    print("La palabra es un pal√≠ndromo.")
else:
    print("La palabra NO es un pal√≠ndromo.")

"""
6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
 Restricciones:
No se puede convertir el n√∫mero a string.
Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
Ejemplos:
suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
suma_digitos(9) ‚Üí 9
suma_digitos(305) ‚Üí 8 (3 + 0 + 5)
"""

# Funci√≥n recursiva para sumar los d√≠gitos de un n√∫mero
def suma_digitos(n):
    if n < 10:
        return n
    else:
        return (n % 10) + suma_digitos(n // 10)

# Pedimos el n√∫mero al usuario
numero = int(input("Ingrese un n√∫mero entero positivo: "))

# Llamamos a la funci√≥n y mostramos el resultado
print(f"La suma de los d√≠gitos es: {suma_digitos(numero)}")

"""
7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n
bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al
√∫ltimo nivel con un solo bloque.
Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la
pir√°mide.
 Ejemplos:
contar_bloques(1) ‚Üí 1 (1)
contar_bloques(2) ‚Üí 3 (2 + 1)
contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1)
"""

# Funci√≥n recursiva para contar los bloques de la pir√°mide
def contar_bloques(n):
    if n == 1:
        return 1
    else:
        return n + contar_bloques(n - 1)

# Pedimos el n√∫mero de bloques en el nivel inferior
n = int(input("Ingrese la cantidad de bloques en el nivel m√°s bajo: "))

# Llamamos a la funci√≥n y mostramos el resultado
print(f"El total de bloques necesarios es: {contar_bloques(n)}")

"""
8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un
n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
aparece ese d√≠gito dentro del n√∫mero.
 Ejemplos:
contar_digito(12233421, 2) ‚Üí 3
contar_digito(5555, 5) ‚Üí 4 
contar_digito(123456, 7) ‚Üí 0 
"""

# Funci√≥n recursiva para contar cu√°ntas veces aparece un d√≠gito en un n√∫mero
def contar_digito(numero, digito):
    if numero == 0:
        return 0
    else:
        if numero % 10 == digito:
            return 1 + contar_digito(numero // 10, digito)
        else:
            return contar_digito(numero // 10, digito)

# Pedimos los datos al usuario
numero = int(input("Ingrese un n√∫mero entero positivo: "))
digito = int(input("Ingrese el d√≠gito a buscar (0-9): "))

# Validaci√≥n opcional del d√≠gito
if 0 <= digito <= 9:
    resultado = contar_digito(numero, digito)
    print(f"El d√≠gito {digito} aparece {resultado} veces en el n√∫mero.")
else:
    print("Debe ingresar un d√≠gito entre 0 y 9.")
